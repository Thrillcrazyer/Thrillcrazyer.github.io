<div style="display: flex; flex-direction: column; gap: 1.5rem; align-items: stretch;">
  <div id="coauthor-graph" style="height: 420px; min-height: 320px; border: 1px solid #222; box-shadow: 0 0 24px #000a; background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);"></div>
  <div id="coauthor-table" style="width: 100%;"></div>
</div>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
(() => {
  // Bail out if the container is not present on the page.
  const container = document.getElementById('coauthor-graph');
  if (!container) return;

  fetch('/assets/json/collabo_graph.json')
    .then(response => response.json())
    .then(graph => {
      // Draw graph
      const width = container.clientWidth || 800;
      const height = width * 9 / 16;

      // Remove any existing SVG (fix double box issue)
      d3.select(container).selectAll('svg').remove();

      const svg = d3.select(container)
        .append('svg')
        .attr('viewBox', [0, 0, width, height])
        .style('width', '100%')
        .style('height', '100%')
        .style('border', '1px solid #e2e8f0')
        .call(
          d3.zoom()
            .scaleExtent([0.3, 5])
            .on('zoom', (event) => {
              svg.select('g.zoomable').attr('transform', event.transform);
              updateLabelVisibility(event.transform);
            })
        );

      const simulation = d3.forceSimulation(graph.nodes)
        .force('link', d3.forceLink(graph.links)
          .id(d => d.id)
          .distance(d => 30 + Math.log(d.value + 1) * 10)
          .strength(d => 0.1 + d.value * 0.02))
        .force('charge', d3.forceManyBody().strength(-50))
        .force('center', d3.forceCenter(width / 2, height / 2));

      // Create a group for zoom/pan
      const zoomable = svg.append('g').attr('class', 'zoomable');



      const link = zoomable.append('g')
        .attr('stroke', '#e0f7fa')
        .attr('stroke-opacity', 0.35)
        .selectAll('line')
        .data(graph.links)
        .join('line')
        .attr('stroke-width', d => 1.2 + Math.log(d.value));

      // 채도 높은 쨍한 섬/배 팔레트
      const islandShipColors = [
        '#ffe600', // Vivid Yellow (island sand)
        '#00e676', // Neon Green (island)
        '#fff',    // White (island/ship)
        '#00c853', // Strong Green (island)
        '#ff9100', // Bright Orange (island/ship)
        '#00b8ff', // Vivid Sky Blue (ship)
        '#ffd600', // Vivid Yellow (ship)
        '#ff1744', // Vivid Red (ship)
        '#2979ff', // Bright Blue (ship)
        '#d500f9', // Vivid Purple (ship)
      ];
      const color = d3.scaleOrdinal(islandShipColors);
      // Find the top author (max value)
      let maxValue = Math.max(...graph.nodes.map(d => d.value));
      const nodeGroup = zoomable.append('g');
      const node = nodeGroup
        .selectAll('g')
        .data(graph.nodes)
        .join('g');

      // Draw circles
      node.append('circle')
        .attr('r', d => {
          if (d.value === maxValue) return 12 + Math.sqrt(d.value); // 1등 노드 더 크게
          return 4 + Math.sqrt(d.value);
        })
        .attr('fill', (d, i) => color(i % 10))
        .attr('stroke', '#fff')
        .attr('stroke-width', 1)
        .call(d3.drag()
          .on('start', dragstarted)
          .on('drag', dragged)
          .on('end', dragended));

      // Add name labels inside nodes (surname on top, given name below, always centered, show/hide by zoom)
      function splitName(name) {
        // 콤마가 있으면 콤마 앞(성)만
        if (name.includes(',')) {
          return name.split(',')[0].trim();
        }
        // 한글 이름: 성1글자만
        if (/^[가-힣]{2,}$/.test(name)) {
          return name[0];
        }
        // 영문 이름: 공백으로 분리해서 첫 단어만
        if (/^[A-Za-z ]+$/.test(name.trim())) {
          return name.trim().split(/\s+/)[0];
        }
        return name;
      }
      const label = node.append('text')
        .text(d => splitName(d.id))
        .attr('text-anchor', 'middle')
        .attr('dominant-baseline', 'middle')
        .attr('pointer-events', 'none')
        .attr('fill', '#111')
        .attr('font-size', d => {
          const r = (d.value === maxValue) ? 12 + Math.sqrt(d.value) : 4 + Math.sqrt(d.value);
          return Math.max(8, r * 0.7); // 살짝 키움
        })
        .style('white-space', 'pre-line')
        .style('display', 'none');

      // Show/hide labels based on zoom level and node size
      function updateLabelVisibility(transform) {
        label.each(function(d) {
          const r = (d.value === maxValue) ? 12 + Math.sqrt(d.value) : 4 + Math.sqrt(d.value);
          // threshold: label shows if node radius * zoom > 16
          if ((r * transform.k) > 16) {
            d3.select(this).style('display', 'block');
          } else {
            d3.select(this).style('display', 'none');
          }
        });
      }
      // Initial label visibility
      updateLabelVisibility({k: 1});

      // Tooltip for displaying author names on hover.
      const tooltip = d3.select('body')
        .append('div')
        .attr('class', 'graph-tooltip')
        .style('position', 'absolute')
        .style('padding', '4px 8px')
        .style('background', 'rgba(0,0,0,0.7)')
        .style('color', '#fff')
        .style('border-radius', '4px')
        .style('font-size', '0.75rem')
        .style('pointer-events', 'none')
        .style('opacity', 0);

      node.on('mouseover', (event, d) => {
        tooltip
          .style('opacity', 1)
          .html(`<strong>${d.id}</strong><br/>Papers: ${d.value}`);
      }).on('mousemove', (event) => {
        tooltip
          .style('left', (event.pageX + 10) + 'px')
          .style('top', (event.pageY + 10) + 'px');
      }).on('mouseout', () => {
        tooltip.style('opacity', 0);
      });

      node.append('title').text(d => d.id);

      simulation.on('tick', () => {
        link
          .attr('x1', d => clamp(d.source.x, 0, width))
          .attr('y1', d => clamp(d.source.y, 0, height))
          .attr('x2', d => clamp(d.target.x, 0, width))
          .attr('y2', d => clamp(d.target.y, 0, height));
        node.attr('transform', d => `translate(${d.x = clamp(d.x, 0, width)},${d.y = clamp(d.y, 0, height)})`);
      });

      // Helper function to constrain a value within [min, max].
      function clamp(x, min, max) {
        return x < min ? min : x > max ? max : x;
      }

      // Drag event handlers
      function dragstarted(event, d) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
      }
      function dragged(event, d) {
        d.fx = event.x;
        d.fy = event.y;
      }
      function dragended(event, d) {
        if (!event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
      }

      // --- 표 생성 (# 제거, 여러명 한줄, 박스 하단, 글자 작게) ---
      const tableDiv = document.getElementById('coauthor-table');
      if (tableDiv) {
        // 정렬: Papers 내림차순
        const sorted = [...graph.nodes].sort((a, b) => b.value - a.value);
        const cols = 5; // 한 줄에 5명씩
        let html = `<table style="border-collapse:collapse;width:100%;font-size:0.7em;">
          <thead><tr>`;
        for (let c = 0; c < cols; c++) {
          html += `<th style="text-align:center;padding:2px 6px;border-bottom:1px solid #ccc;">Author</th><th style="text-align:center;padding:2px 6px;border-bottom:1px solid #ccc;${c < cols-1 ? 'border-right:2px solid #888;' : ''}">Papers</th>`;
        }
        html += `</tr></thead><tbody>`;
        for (let i = 0; i < sorted.length; i += cols) {
          html += '<tr>';
          for (let j = 0; j < cols; j++) {
            const idx = i + j;
            if (idx < sorted.length) {
              const d = sorted[idx];
              html += `<td style="text-align:left;padding:2px 6px;">${d.id}</td><td style="text-align:center;padding:2px 6px;${j < cols-1 ? 'border-right:2px solid #888;' : ''}">${d.value}</td>`;
            } else {
              html += `<td></td><td></td>`;
            }
          }
          html += '</tr>';
        }
        html += '</tbody></table>';
        tableDiv.innerHTML = html;
      }
    });
})();
</script>